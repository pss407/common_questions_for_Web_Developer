(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{350:function(t,a,e){"use strict";e.r(a);var r=e(33),l=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"immutable과-mutable은-무엇이-다른것인가요"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#immutable과-mutable은-무엇이-다른것인가요"}},[t._v("#")]),t._v(" immutable과 mutable은 무엇이 다른것인가요?")]),t._v(" "),e("p",[t._v("Mutable한 객체는 생성된 이후에 상태가 변경될 수 있는 객체이고, Immutable한 객체는 생성된 이후에 상태가 변경되지 않는 객체를 말한다. 자바스크립트에서 Object와 Array를 제외한 모든 타입은 Immutable한 타입이다.")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" immutableString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// In the above code, a new object with string value is created.")]),t._v("\n\nimmutableString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" immutableString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'World'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// We are now appending "World" to the existing value.')]),t._v("\n")])])]),e("p",[e("code",[t._v("immutableString")]),t._v("에 string 값을 더하면, 아래와 같은 이벤트들이 발생한다.")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("immutableString")]),t._v("에 존재하던 값을 읽음")]),t._v(" "),e("li",[t._v("'World'가 "),e("code",[t._v("immutableString")]),t._v("에 존재하던 값에 덧붙여짐")]),t._v(" "),e("li",[t._v("결과값이 새로운 메모리 블록에 할당됨")]),t._v(" "),e("li",[e("code",[t._v("immutableString")]),t._v(" 객체가 새로운 메모리 공간을 가리킴")]),t._v(" "),e("li",[t._v("이전에 "),e("code",[t._v("immutableString")]),t._v("이 가리키던 메모리 공간은 GC의 대상이 됨")])]),t._v(" "),e("p",[t._v("따라서 Immutable한 타입은, 이전의 상태를 전혀 변화하지 않고 새로운 상태로 만들기 때문에 변경되지 않는다고 말하는 것이다.")]),t._v(" "),e("h2",{attrs:{id:"immutable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#immutable"}},[t._v("#")]),t._v(" Immutable")]),t._v(" "),e("p",[t._v("Immutable 객체는 내용이 변하지 않는 객체를 말한다. 객체는 다양한 이유로 불변적일 수 있는데, 예시로 아래와 같은 경우가 있다.")]),t._v(" "),e("ul",[e("li",[t._v("성능을 향상시키기 위함\n"),e("ul",[e("li",[t._v("객체가 미래에 변할 계획이 없을 때")])])]),t._v(" "),e("li",[t._v("메모리 사용을 줄이기 위함\n"),e("ul",[e("li",[t._v("전체 객체를 복사하지 않고 객체 참조를 만듦")])])]),t._v(" "),e("li",[t._v("Thread-safety (쓰레드끼리 자원 공유할 때 안전하다는 뜻 같음)\n"),e("ul",[e("li",[t._v("여러개의 쓰레드가 서로 간섭하지 않고 같은 객체를 참조할 수 있음")])])])]),t._v(" "),e("h2",{attrs:{id:"mutable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mutable"}},[t._v("#")]),t._v(" Mutable")]),t._v(" "),e("p",[t._v("Mutable은 바뀔 수 있는 변수 타입을 말한다. Javascript에서는 object와 array만 Mutable한 타입이고, 원시 타입은 Immutable하다.")]),t._v(" "),e("blockquote",[e("p",[t._v("Mutable한 값을 Immutable하게 만들기 위해서 새로운 변수를 만들어 보관할 수 있지만, 이전 값은 여전히 메모리에 남아있기 때문에 GC가 필요하다.")])]),t._v(" "),e("h2",{attrs:{id:"참조"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#참조"}},[t._v("#")]),t._v(" 참조")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Immutable",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN_Immutable"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Mutable",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN_Mutable"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=l.exports}}]);